basePath: /api/v1
definitions:
  models.Gender:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - Male
    - Female
  models.Patient:
    properties:
      address:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: string
      medical_history:
        type: string
      phone:
        type: string
      registered_by:
        type: string
      updated_at:
        type: string
    type: object
  models.UserType:
    enum:
    - doctor
    - receptionist
    type: string
    x-enum-varnames:
    - Doctor
    - Receptionist
  schemas.PatientCreate:
    properties:
      address:
        type: string
      date_of_birth:
        description: 'Format: YYYY-MM-DD'
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      medical_history:
        type: string
      phone:
        type: string
    type: object
  schemas.PatientListResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      patients:
        items:
          $ref: '#/definitions/schemas.Patients'
        type: array
      total:
        type: integer
    type: object
  schemas.PatientUpdate:
    properties:
      address:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      medical_history:
        type: string
      phone:
        type: string
    type: object
  schemas.Patients:
    properties:
      address:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: string
      medical_history:
        type: string
      phone:
        type: string
      registered_by:
        type: string
      registered_by_user:
        properties:
          full_name:
            type: string
          id:
            type: string
        type: object
      updated_at:
        type: string
    type: object
  schemas.TokenResponse:
    properties:
      access_token:
        type: string
      token_type:
        type: string
      user_type:
        type: string
    type: object
  schemas.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  schemas.UserRegister:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      user_type:
        $ref: '#/definitions/models.UserType'
      username:
        type: string
    type: object
  schemas.UserRegisterResponse:
    properties:
      message:
        type: string
      user_id:
        type: string
    type: object
  server.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: API for managing a medical clinic system with doctors, receptionists,
    and patients
  termsOfService: http://swagger.io/terms/
  title: Makerble Medical System API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login for doctors and receptionists
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/schemas.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logout current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /patients:
    get:
      consumes:
      - application/json
      description: Get all patients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PatientListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List patients
      tags:
      - patients
    post:
      consumes:
      - application/json
      description: Create a new patient (Receptionist only)
      parameters:
      - description: Patient information
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/schemas.PatientCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create patient
      tags:
      - patients
  /patients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a patient (Receptionist only)
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete patient
      tags:
      - patients
    get:
      consumes:
      - application/json
      description: Get patient by ID
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Patient'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get patient
      tags:
      - patients
    patch:
      consumes:
      - application/json
      description: Update patient medical information (Doctor only)
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      - description: Medical information update
        in: body
        name: medical_info
        required: true
        schema:
          $ref: '#/definitions/schemas.PatientUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update patient medical info
      tags:
      - patients
    put:
      consumes:
      - application/json
      description: Update patient information (Receptionist only)
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      - description: Patient update information
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/schemas.PatientUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update patient
      tags:
      - patients
  /register:
    post:
      consumes:
      - application/json
      description: Register a new doctor or receptionist
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Register new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
